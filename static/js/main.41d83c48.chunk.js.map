{"version":3,"sources":["logo.svg","ListScrollToItemOutside.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","list","id","ListScrollToItem","refs","reduce","acc","value","createRef","align","rel","href","map","item","key","class","type","onClick","current","scrollIntoView","behavior","block","ref","style","height","border","firstname","lastname","year","App","className","src","logo","alt","ListScrollToItemOutside","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,kC,uJCGrCC,G,KAAO,CACX,CACEC,GAAI,SAGN,CACEA,GAAI,WAGN,CACEA,GAAI,SAGN,CACEA,GAAI,kBAyDOC,EApDU,WACvB,IAAMC,EAAOH,EAAKI,QAAO,SAACC,EAAKC,GAE7B,OADAD,EAAIC,EAAML,IAAMM,sBACTF,IACN,IASH,OAEE,yBAAKG,MAAQ,UACX,0BAAMC,IAAI,aAAaC,KAAK,6CAC5B,4BACGV,EAAKW,KAAI,SAAAC,GAAI,OACZ,wBAAIC,IAAKD,EAAKX,IAEZ,4BAEEa,MAAM,qBACNC,KAAK,SACLC,QAAS,kBAlBDf,EAkBmBW,EAAKX,GAjB1CE,EAAKF,GAAIgB,QAAQC,eAAe,CAC9BC,SAAU,SACVC,MAAO,UAHS,IAAAnB,IAoBPW,EAAKX,SAMd,4BACGD,EAAKW,KAAI,SAAAC,GAAI,OACZ,wBAEEC,IAAKD,EAAKX,GACVoB,IAAKlB,EAAKS,EAAKX,IACfqB,MAAO,CAAEC,OAAQ,QAASC,OAAQ,oBAElC,6BAAMZ,EAAKX,IACX,6BAAMW,EAAKa,WACX,6BAAMb,EAAKc,UACX,6BAAMd,EAAKe,aC5CRC,MAhBf,WACE,OACE,yBAAKC,UAAU,aACb,yBAAK5B,GAAG,cACN,gCACA,yBAAKO,MAAQ,SAASe,OAAS,OAAOO,IAAMC,IAAMC,IAAI,UAAU/B,GAAG,SACnE,wBAAIO,MAAM,SAASM,MAAM,aAAzB,uBAIF,kBAACmB,EAAD,MACA,+BCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.41d83c48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { createRef } from 'react';\nimport './App.css';\n\nconst list = [\n  {\n    id: 'Story',\n\n  },\n  {\n    id: 'Mission',\n\n  },\n  {\n    id: 'Event',\n\n  },\n  {\n    id: 'Get Involved',\n\n  },\n];\n\nconst ListScrollToItem = () => {\n  const refs = list.reduce((acc, value) => {\n    acc[value.id] = createRef();\n    return acc;\n  }, {});\n\n  // Scroll Into View API: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n  const handleClick = id =>\n    refs[id].current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'start',\n    });\n\n  return (\n\n    <div align = 'center'>\n      <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"></link>\n      <ul>\n        {list.map(item => (\n          <td key={item.id} >\n            \n            <button \n              // id = \"cleanButton\"\n              class=\"w3-button w3-black\"\n              type=\"button\"\n              onClick={() => handleClick(item.id)}\n            >\n              {item.id}\n            </button>\n          </td>\n        ))}\n      </ul>\n\n      <ul> \n        {list.map(item => (\n          <li\n            \n            key={item.id}\n            ref={refs[item.id]}\n            style={{ height: '250px', border: '1px solid green'}}\n          >\n            <div>{item.id}</div>\n            <div>{item.firstname}</div>\n            <div>{item.lastname}</div>\n            <div>{item.year}</div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListScrollToItem;","import React from 'react';\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from './logo.svg';\nimport './App.css';\nimport ListScrollToItemOutside from './ListScrollToItemOutside';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div id=\"top banner\">\n        <figure>\n        <img align = 'center' height = '50px' src= {logo} alt='randoms' id=\"img1\"/>\n        <h3 align='center' class='App-Title'>Penn Greek Relays</h3>\n        </figure>\n      </div>\n      \n      <ListScrollToItemOutside />\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}